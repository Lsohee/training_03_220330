* {
  margin: 0;
  padding: 0;
}

#container {
  width: 5000px;
  height: 5000px;
  background-color: beige;
  display: flex;
  overflow-y: auto;
  flex-direction: column;
  align-items: center;
}

/* Q1. 화면이 세로 스크롤이 되게 만들고 싶은데

"화면이 세로스크롤이 되게 만들고 싶은것" 은 목적어
"무엇을 어떻게 하고싶어서"가 주어 입니다!! ㅋㅋㅋㅋㅋ

"아이템으로 17번째 행에 있는 div을 container의 크기보다 오른쪽으로 넘어가게 만들고 싶은데 container크기는 이렇게 설정하고 값을 css 파일 25행에서 넣어봤습니다. 넣어보니 이런 현상이 일어나는 것같은데 무엇때문인지 알고 싶습니다" -> "세로스크롤이 되게 하고싶은데" 로 축약된겁니다. 


 * 화면을 세로 스크롤이 되는 것은 기본값인데, 너비값을 5000px로 늘린 이유를 알고싶습니다. 다른 div들이 크기가 변하는 이유는 display:flex 자체가 "가변"하는 속성이기때문에 지정한 너비값보다 적용우선순위에서 밀립니다. display가 width값보다 훨~~~~~씬 중요합니다. width와 display가 속성이 상충되는 문제입니다. 

container>div:nth-child(3)의 세로를 늘리면  다른 div들의 크기가 변함. 아마도 container의 display:flex;때문인거 같음
--> Q1-1. item에 display 값을 따로 지정해서 해결할 수는 없나?

  * 너비값 속성중에 max-width 값을 활용하면 일부 제한 할 수 있습니다. 

  min-width
  width
  max-width




  -모든 부모 div에 하나하나 절대값을 부여해야 스크롤을 쓸수 있는것인가?
  결국 container에 절댓값으로 크기를 지정했더니 스크롤이 생기긴 함
  가로 스크롤은 왜 생기는 거니
    -아마 세로 스크롤 픽셀때문인듯
  
  
  -Q1-2. container의 크기를 절댓값으로 지정하기 전에 div의 높이에 절대값을 넣었더니 창을 확대 할 수 록 div의 높이가 작아짐
  왜그러는 거니
    -이건 찾을 수 가 없음

--> Q2  item도 다른 div의 부모가 될수 있음=그 item의 display값이 flex여야  하는 경우 display 값을 중복가능? */
/* 이런식으로 display 값을 2개를 줄수도 있나?
  -->안되는 거보면 불가능 한듯 */

  /* 
  
  * item을 위한 flex 속성이 따로 있습니다. 
  https://www.w3schools.com/cssref/css3_pr_flex.asp
  
  
  
  */

#container div {
  border: 1px rgb(7, 7, 7) solid;
}

/* ---------header-------------------------- */
#container>div:nth-child(1) {
  width: 100%;
  height: 100px;
  display: inline-block;

}

/* ----------fixed header------------------- */
#container>div:nth-child(2) {
  width: 100%;
  height: 100px;
  display: inline-block;
}

/* -----------main--------------------------- */
#container>div:nth-child(3) {
  width: 80%;
  /* Q2. display: inline-block; */
  height: 800px;
  display: flex;
  justify-content: space-around;
}

/* ----------left------------------- */
#container>div:nth-child(3)>div:nth-child(1) {
  width: 30%;
  height: 100%;
  display: flex;
  justify-content: center;
}

#container>div:nth-child(3)>div:nth-child(1)>div {
  border-radius: 200px;
  width: 400px;
  height: 400px;
  position: relative;
  top: -100px;
}

/* ----------right------------------ */
#container>div:nth-child(3)>div:nth-child(2) {
  width: 65%;
  height: 100%;
}